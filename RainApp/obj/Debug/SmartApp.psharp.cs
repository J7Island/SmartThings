//  <auto-generated />
using Microsoft.PSharp;

namespace RainApp
{
    internal class SmartApp : Machine
    {
        internal class Config : Event
        {
            public MachineId netEnvID;

            public Config(MachineId netEnvID)
                : base()
            {
                this.netEnvID = netEnvID;
            }
        }

        internal class RequestWeather : Event
        {
            public MachineId appID;

            public RequestWeather(MachineId appID)
                : base()
            {
                this.appID = appID;
            }
        }

        internal class RequestSensorState : Event
        {
            public MachineId appID;

            public RequestSensorState(MachineId appID)
                : base()
            {
                this.appID = appID;
            }
        }

        internal class PhoneSms : Event
        {
            public PhoneSms()
                : base()
            {
            }
        }

        internal class TimerStart : Event
        {
            public TimerStart()
                : base()
            {
            }
        }

        MachineId contacts;
        MachineId phoneNumber;
        MachineId timer;
        MachineId netEnv;
        MachineId stPlatform;

        [Microsoft.PSharp.Start]
        [OnEntry(nameof(psharp_init_on_entry_action))]
        class init : MachineState
        {
        }

        [OnEntry(nameof(psharp_waitSchedule_on_entry_action))]
        [OnEventGotoState(typeof(VirtualScheduler.End), typeof(schedulerCheck))]
        class waitSchedule : MachineState
        {
        }

        [OnEntry(nameof(psharp_schedulerCheck_on_entry_action))]
        [OnEventGotoState(typeof(SmartThingsPlatform.IsStorm), typeof(IsStormState))]
        [OnEventGotoState(typeof(SmartThingsPlatform.IsnotStorm), typeof(IsnotStormState))]
        class schedulerCheck : MachineState
        {
        }

        [OnEntry(nameof(psharp_IsStormState_on_entry_action))]
        [OnEventGotoState(typeof(ContactSensor.SensorClosed), typeof(DoorSafe))]
        [OnEventGotoState(typeof(ContactSensor.SensorOpen), typeof(SendSms))]
        class IsStormState : MachineState
        {
        }

        class IsnotStormState : MachineState
        {
        }

        [OnEntry(nameof(psharp_SendSms_on_entry_action))]
        class SendSms : MachineState
        {
        }

        class DoorSafe : MachineState
        {
        }

        protected void psharp_init_on_entry_action()
        {
            netEnv = (this.ReceivedEvent as Config).netEnvID;
            contacts = this.CreateMachine(typeof(ContactSensor),new ContactSensor.Config(this.Id));
            phoneNumber = this.CreateMachine(typeof(Phone),new Phone.Config(this.Id));
            timer = this.CreateMachine(typeof(VirtualScheduler),new VirtualScheduler.Config(this.Id));
            stPlatform = this.CreateMachine(typeof(SmartThingsPlatform),new SmartThingsPlatform.Config(this.Id));
            this.Goto<waitSchedule>();

        }

        protected void psharp_waitSchedule_on_entry_action()
        {
            this.Send(timer,new TimerStart());
        }

        protected void psharp_schedulerCheck_on_entry_action()
        {
            this.Send(stPlatform,new RequestWeather(this.Id));
        }

        protected void psharp_IsStormState_on_entry_action()
        {
            this.Send(contacts,new RequestSensorState(this.Id));

        }

        protected void psharp_SendSms_on_entry_action()
        {
            this.Send(this.phoneNumber,new PhoneSms());
        }
    }
}
